#summary The Selection Management system enables any type of object the ability to become selectable and be treated as part of a group similar to a Flex's !RadioButtonGroup.

= Introduction =

The Selection Management system provides a way to make any object selectable and part of a selectable group. By implementing a simple interface !ISelectable which exposes a single property "selected", a developer can make any object in its code base a selectable item.  By adding an instance of the ISelectable item to a selectable group, we can create a set of objects that behavior togather like one would expect of a !RadioButtonGroup and a !RadioButton. When an item is selected, all other items in the group are unselected.  There are two ways to use the Selection Management system to control groups of selectable items.  The first to leverage the system's controller class !SelectionController,which provides developer the most control in selecting and unselecting items. However, this approach requires more custom code that might necessarily be needed. To provide a more out of box solution, a !SelectionGroup class is available for developer to leverage to encapsulate the common code a typical group would use to select and unselect items.   Below we will explore how to create a !ISelectable item and how to utilize the both grouping systems.  

= Creating a Selectable Item =

To create a selectable item, implement the ISelectable interface and define a get and set method for the selected attribute. The set method should analyze the Boolean value provided and display the correct state of the object based on the value.  If the value is true, the object should show the selected state, otherwise unselected.  

In the example below, we will look at the value and set the classname based on its value.  The current selected value is saved inside of a private variable "selected".  

{{{
public class SelectionItem extends UIComponent implements ISelectable
{
  private var __selected:Boolean;
		
  public function get selected():Boolean
  {
     return __selected;
  }
  
  public function set selected(value:Boolean):void
  {
     __selected = value;
			
    className = (__selected) ? "selectedItem" : "unSelectedItem";
  }
}
}}}
= Using The !SelectionController =
The !SelectionController is the main class of the system.  This class is a Singleton and provides static method to encapsulate the singleton instance.  Developers have a choice to interact directly with this class or use the !SelectionGroup to bypass direct interaction. with the controller.  Developers who want full control over selecting and unselecting items should use the controller directly.  An example use case is for a custom tab based system where each tab object is part of a selection group and upon selection, the tab should not select until data is returned from the server. In order to execute this behavior, the invoking class would have to listen to both the selection of the item and an event from the service layer indicating data has been returned from the server.  Below we will learn how to create a selection group from the controller, add/remove items, and how to select an item and deselect all items in the group.


== Creating a Group ==
The selection controller generates a group id via the generateNewId method.  This id is passed into all method to access the group and perform various operations such as adding and removing items.

{{{
_groupId = SelectionController.generateNewId();
}}}
== Adding items ==
Items are added to a group one by one via the addItem method.  

{{{
var selectionItem:SelectionItem = new SelectionItem();
SelectionController.addItem(selectionItem, _groupId);
}}}
== Removing an item ==
Items can be removed one by one using removeItem.
{{{
SelectionController.removeItem(selectionItem,_groupId);
}}}
== Selecting an item ==
To select an item you must call the selectItem method on the controller. The controller will take responsibility for calling the selected property on each item in the group.  The item passed into selectItem() will be passed a value of true, all others will be given false.

{{{
SelectionController.selectItem(selectionItem);
}}}

== Deselecting all items ==







= Using The !SelectionGroup =