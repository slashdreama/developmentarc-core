#summary Task System is a priority queuing system that enables an application to execute specific bundles of business and/or server logic in a specific order based on priority and overrides.

= Introduction =

Task System is a priority queuing system that enables an application to execute specific bundles of business and/or server logic in a specific order based on priority and overrides.   These bundles are encapsulated inside of Tasks, which can be bundled inside of a specific data structure called !TaskGroups.  Tasks and task groups have the ability to take priority over other tasks or task groups inside of the queue, as well as replace existing tasks in the queue based on a set of overrides an individual task can define.


==!TaskController==

The !TaskController class is the main manager of the task system framework. This class is responsible for managing current and new tasks in a task system. The class is used as an instance to allow for multiple task to run in the same application.

The !TaskController, by default, is not a singleton and the goal of the framework is to allow multiple Task systems to be running in any given application. For example, one task system can be created to manage server requests while another can be used to control internal business operations. To create multiple systems, simply create multiple instances of the !TaskController.

To use the !TaskController as a singleton, utilize the SingletonFactory utility class within the [http://code.google.com/p/developmentarc-core/w/list ViviSectingMedia] library.

The controller starts a set of tasks based on the active task limit set on the controller. By default 2 tasks can be concurrently active within the controller, however this is configurable in the task controller instance.  When a task is complete the controller will remove the task from the active list and start the next one in the queue, if any.

The !TaskController is also responsible for managing overrides.  When a task is added to the controller, the tasks overrides are applied removing any existing tasks from the queue that matches an override. Overrides do pertain to tasks that are currently active, those will be canceled and removed from the queue. Next the task is added to the internal priority queue in the proper order.


==!AbstractTask==

The !AbstractTask is the base class to extend all Tasks from. The !TaskController does not require a Task to extend from !AbstractTask, instead only the ITask interface is required. The !AbstractTask is provided as a starting point that define basic types, events and common method implementations of the required interface.

==!TaskGroup==

The !TaskGroup is a data structure that allows a set of tasks to be grouped together as a collection. The !TaskGroup can then be added to the !TaskController and all of the grouped task will be executed first before the next task in the controller queue is processed.

When an override is provided to the !TaskController, the !TaskGroup acts as a parent type and the !TaskGroup will remove all tasks if the provided override matches the group type. The individual type of the task is ignored in this case. However, Tasks added to the group can override the same way as if they were added directly to the !TaskController. Upon adding a task, the !TaskGroup will evaluate the tasks overrides and the tasks selfOverrding value. After this evaluation the !TaskGroup will take appropriate action depending on the different settings. The functionality is similar to the !TaskController's override mechanism.  Please note, !TaskGroups can not contain other !TaskGroups.